from random import uniform
import pandas

rowsParticles = []
rowsBangs = []  
LIST_INITS = []
NUM_PARTICLES = 10
NUM_STEPS = 5000

SIM_COL = ['x_pos','y_pos','z_pos','x_vel','y_vel','z_vel','mass']

ARCH_COL = ['x_pos_init','y_pos_init','z_pos_init','x_vel_init','y_vel_init','z_vel_init','mass_init']

        
def vectors(df):
    for particle1 in df.index:  #each row of df is a different particle's init at the bang
        G = 6.67*10**-11
        t = 1
	AX = 0
	AY = 0
	AZ = 0
	m1 = df['mass'][particle1]
        dix = df['x_pos'][particle1]
        diy = df['y_pos'][particle1]
        diz = df['z_pos'][particle1]
        vix = df['x_vel'][particle1]
        viy = df['y_vel'][particle1]
        viz = df['z_vel'][particle1]
        for particle2 in df.index:
            if particle2 != particle1:
		m2 = df['mass'][particle2]
                dx = df['x_pos'][particle2]
                dy = df['y_pos'][particle2]
                dz = df['z_pos'][particle2]
		dr = ((dx-dix)**2 + (dy-diy)**2 + (dz-diz)**2)**.5 
		F = G*m1*m2/dr	
		ax = F/m1*(dx-dix)/dr
		ay = F/m1*(dy-diy)/dr
		az = F/m1*(dz-diz)/dr
		AX += ax
		AY += ay
		AZ += az
	print(AX,AY,AZ)
        dfx = (vix*t + .5*AX*(t**2)) + dix
        dfy = (viy*t + .5*AY*(t**2)) + diy
        dfz = (viz*t + .5*AZ*(t**2)) + diz
        vfx = vix + AX*t
        vfy = viy + AY*t
        vfz = viz + AZ*t
        df['x_pos'][particle1] = dfx
        df['y_pos'][particle1] = dfy
        df['z_pos'][particle1] = dfz
        df['x_vel'][particle1] = vfx
        df['y_vel'][particle1] = vfy
        df['z_vel'][particle1] = vfz
    return df
        
def bang(num_particles):
    for i in range(num_particles):
	mass = uniform(0,1)
        x_pos_init = uniform(-10,10)
        y_pos_init = uniform(-10,10)
        z_pos_init = uniform(-10,10)
        x_vel_init = uniform(-1**10**2,1**10**2)
        y_vel_init = uniform(-1**10**2,1**10**2)    
        z_vel_init = uniform(-1**10**2,1**10**2)
        sim_init = [x_pos_init,y_pos_init,z_pos_init,x_vel_init,y_vel_init,z_vel_init,mass]
        LIST_INITS.append(sim_init)
    black_hole = [0,0,0,0,0,0,10000000000]
    LIST_INITS.append(black_hole)
    ARCH_DF = pandas.DataFrame(LIST_INITS,columns=ARCH_COL)
    SIM_DF = pandas.DataFrame(LIST_INITS,columns=SIM_COL)
    return ARCH_DF,SIM_DF
    
def timesteps(df, num_steps):
    for i in range(1,num_steps+1):
        df = vectors(df)
	df.to_csv('arch'+str(i)+'.csv')

	

def main():
    ARCH_DF,SIM_DF = bang(NUM_PARTICLES)
    SIM_DF.to_csv('arch'+str(0)+'.csv')
    timesteps(SIM_DF, NUM_STEPS)

main()

#####everything above this creates the dataframes for the universe simulation. Everything below this runs through the python shell within blender in order to keyframe an animation

import bpy
import csv

NUM_PARTICLES = 10
NUM_STEPS = 5000

bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)
bpy.context.scene.frame_end = NUM_STEPS

data = csv.reader('xX_ARCH_Xx.csv')

SIM_COL = ['x_pos','y_pos','z_pos','x_vel','y_vel','z_vel']

ARCH_COL = ['x_pos_init','y_pos_init','z_pos_init','x_vel_init','y_vel_init','z_vel_init']

def insertFrame():
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.anim.keyframe_insert_menu(type='LocRotScale')
        
def moveMass(xs,ys,zs):
    i = 1
    bpy.ops.object.select_all(action='SELECT')
    for obj in bpy.context.selected_objects:
        bpy.ops.object.select_all(action='DESELECT')
        name = obj.name
        bpy.data.objects[name].select_set(True)
        x_pos = float(xs[i])/100
        y_pos = float(ys[i])/100
        z_pos = float(zs[i])/100
        bpy.ops.transform.translate(value=(x_pos, y_pos, z_pos), orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', mirror=True, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1, use_proportional_connected=False, use_proportional_projected=False)
        i += 1
        
def bang(xs,ys,zs):
    for i in range(1,NUM_PARTICLES+1):
        x_pos = float(xs[i])/100
        y_pos = float(ys[i])/100
        z_pos = float(zs[i])/100
        bpy.ops.mesh.primitive_ico_sphere_add(location = (x_pos,y_pos,z_pos))
        bpy.ops.object.modifier_add(type='SUBSURF')
        bpy.context.object.modifiers["Subdivision"].levels = 2
        bpy.ops.object.modifier_apply(apply_as='DATA', modifier="Subdivision")

    
def timesteps(num_steps):
    for i in range(0,num_steps+1):
        with open('/home/james/Universe_Simulation/arch'+str(i)+'.csv') as csvfile:
            readCSV = csv.reader(csvfile, delimiter=',')
            xs = []
            ys = []
            zs = []
            for row in readCSV:
                x = row[1]
                y = row[2]
                z = row[3]
                xs.append(x)
                ys.append(y)
                zs.append(z)
        bpy.data.scenes["Scene"].frame_set(i*5)
        if i == 0:
            bang(xs,ys,zs)
            insertFrame()
        else:
            moveMass(xs,ys,zs)
            insertFrame()
    
def main():
    timesteps(NUM_STEPS)
    bpy.data.scenes["Scene"].frame_set(0)

main()

